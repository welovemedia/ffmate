// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "We love media",
            "email": "sev@welovemedia.io"
        },
        "license": {
            "name": "AGPL-3.0",
            "url": "https://opensource.org/license/agpl-v3"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/batch": {
            "post": {
                "description": "Add a batch of new tasks to the queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Add a batch of tasks",
                "parameters": [
                    {
                        "description": "new batch",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.NewBatch"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Batch"
                            }
                        }
                    }
                }
            }
        },
        "/batch/{uuid}": {
            "get": {
                "description": "Get a batch by uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get a btach",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the batch uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Batch"
                        }
                    }
                }
            }
        },
        "/clients": {
            "get": {
                "description": "List all existing client",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "List all clients",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "the page of a pagination request (min 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "the amount of results of a pagination request (min 1; max: 100)",
                        "name": "perPage",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Client"
                            }
                        }
                    }
                }
            }
        },
        "/debug": {
            "delete": {
                "description": "Turn debugging off",
                "tags": [
                    "debug"
                ],
                "summary": "Turn debugging off",
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/debug/{namespace}": {
            "patch": {
                "description": "Set debug namespace(s)",
                "tags": [
                    "debug"
                ],
                "summary": "Set debug namespace(s)",
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/presets": {
            "get": {
                "description": "List all existing presets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "List all presets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Preset"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new preset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "Add a new preset",
                "parameters": [
                    {
                        "description": "new preset",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewPreset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Preset"
                        }
                    }
                }
            }
        },
        "/presets/{uuid}": {
            "get": {
                "description": "Get a preset",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "Get a preset",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Preset"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a preset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "Update a preset",
                "parameters": [
                    {
                        "description": "new preset",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewPreset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Preset"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a preset by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "Delete a preset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the presets uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/settings": {
            "get": {
                "description": "Get all existing settings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get all settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Settings"
                        }
                    }
                }
            },
            "post": {
                "description": "Save all existing settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Save all settings",
                "parameters": [
                    {
                        "description": "save settings",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Settings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Settings"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "description": "List all existing tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "List all tasks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "the page of a pagination request (min 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "the amount of results of a pagination request (min 1; max: 100)",
                        "name": "perPage",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Task"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new tasks to the queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Add a new task",
                "parameters": [
                    {
                        "description": "new task",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewTask"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Task"
                        }
                    }
                }
            }
        },
        "/tasks/{uuid}": {
            "get": {
                "description": "Get a single task by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get single task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the tasks uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Task"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a task by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Delete a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the tasks uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/tasks/{uuid}/cancel": {
            "patch": {
                "description": "Cancel a task by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Cancel a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the tasks uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Task"
                        }
                    }
                }
            }
        },
        "/tasks/{uuid}/restart": {
            "patch": {
                "description": "Restart a task by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Restart a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the tasks uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Task"
                        }
                    }
                }
            }
        },
        "/watchfolder": {
            "get": {
                "description": "List all existing watchfolders",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watchfolder"
                ],
                "summary": "List all watchfolders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Watchfolder"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update a watchfolder",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watchfolder"
                ],
                "summary": "Update a watchfolder",
                "parameters": [
                    {
                        "description": "new watchfolder",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewWatchfolder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Watchfolder"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new watchfolder",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watchfolder"
                ],
                "summary": "Add a new watchfolder",
                "parameters": [
                    {
                        "description": "new watchfolder",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewWatchfolder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Watchfolder"
                        }
                    }
                }
            }
        },
        "/watchfolder/{uuid}": {
            "get": {
                "description": "Get a single watchfolder by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watchfolder"
                ],
                "summary": "Get single watchfolder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the watchfolders uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Watchfolder"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a watchfolder by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watchfolder"
                ],
                "summary": "Delete a watchfolder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the watchfolders uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/webhooks": {
            "get": {
                "description": "List all existing webhooks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "List all webhooks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Webhook"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new webhook for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Add a new webhook",
                "parameters": [
                    {
                        "description": "new webhook",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewWebhook"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Webhook"
                        }
                    }
                }
            }
        },
        "/webhooks/executions": {
            "get": {
                "description": "List all existing webhook executions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "List all webhooks executions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.WebhookExecution"
                            }
                        }
                    }
                }
            }
        },
        "/webhooks/{uuid}": {
            "get": {
                "description": "Get a single webhook by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Get single webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the webhooks uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Webhook"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a webhook for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Update a webhook",
                "parameters": [
                    {
                        "description": "updated webhook",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewWebhook"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Webhook"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a webhook by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Delete a webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the webhooks uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Batch": {
            "type": "object",
            "properties": {
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Task"
                    }
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.Client": {
            "type": "object",
            "properties": {
                "arch": {
                    "type": "string"
                },
                "cluster": {
                    "type": "string"
                },
                "ffmpeg": {
                    "type": "string"
                },
                "identifier": {
                    "type": "string"
                },
                "lastSeen": {
                    "type": "integer"
                },
                "os": {
                    "type": "string"
                },
                "self": {
                    "type": "boolean"
                },
                "session": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.MetadataMap": {
            "type": "object",
            "additionalProperties": {}
        },
        "dto.NewBatch": {
            "type": "object",
            "properties": {
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NewTask"
                    }
                }
            }
        },
        "dto.NewPrePostProcessing": {
            "type": "object",
            "properties": {
                "importSidecar": {
                    "type": "boolean"
                },
                "scriptPath": {
                    "type": "string"
                },
                "sidecarPath": {
                    "type": "string"
                }
            }
        },
        "dto.NewPreset": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "globalPresetName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "outputFile": {
                    "type": "string"
                },
                "postProcessing": {
                    "$ref": "#/definitions/dto.NewPrePostProcessing"
                },
                "preProcessing": {
                    "$ref": "#/definitions/dto.NewPrePostProcessing"
                },
                "priority": {
                    "type": "integer"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NewWebhook"
                    }
                }
            }
        },
        "dto.NewTask": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "inputFile": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/dto.MetadataMap"
                },
                "name": {
                    "type": "string"
                },
                "outputFile": {
                    "type": "string"
                },
                "postProcessing": {
                    "$ref": "#/definitions/dto.NewPrePostProcessing"
                },
                "preProcessing": {
                    "$ref": "#/definitions/dto.NewPrePostProcessing"
                },
                "preset": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NewWebhook"
                    }
                }
            }
        },
        "dto.NewWatchfolder": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "filter": {
                    "$ref": "#/definitions/dto.WatchfolderFilter"
                },
                "growthChecks": {
                    "type": "integer"
                },
                "interval": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "preset": {
                    "type": "string"
                },
                "suspended": {
                    "type": "boolean"
                }
            }
        },
        "dto.NewWebhook": {
            "type": "object",
            "properties": {
                "event": {
                    "$ref": "#/definitions/dto.WebhookEvent"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "dto.PrePostProcessing": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "finishedAt": {
                    "type": "integer"
                },
                "importSidecar": {
                    "type": "boolean"
                },
                "scriptPath": {
                    "$ref": "#/definitions/dto.RawResolved"
                },
                "sidecarPath": {
                    "$ref": "#/definitions/dto.RawResolved"
                },
                "startedAt": {
                    "type": "integer"
                }
            }
        },
        "dto.Preset": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "outputFile": {
                    "type": "string"
                },
                "postProcessing": {
                    "$ref": "#/definitions/dto.NewPrePostProcessing"
                },
                "preProcessing": {
                    "$ref": "#/definitions/dto.NewPrePostProcessing"
                },
                "priority": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NewWebhook"
                    }
                }
            }
        },
        "dto.RawResolved": {
            "type": "object",
            "properties": {
                "raw": {
                    "type": "string"
                },
                "resolved": {
                    "type": "string"
                }
            }
        },
        "dto.Settings": {
            "type": "object"
        },
        "dto.Task": {
            "type": "object",
            "properties": {
                "batch": {
                    "type": "string"
                },
                "client": {
                    "$ref": "#/definitions/dto.Client"
                },
                "command": {
                    "$ref": "#/definitions/dto.RawResolved"
                },
                "createdAt": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "finishedAt": {
                    "type": "integer"
                },
                "inputFile": {
                    "$ref": "#/definitions/dto.RawResolved"
                },
                "metadata": {
                    "description": "Additional metadata for the task",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.MetadataMap"
                        }
                    ]
                },
                "name": {
                    "type": "string"
                },
                "outputFile": {
                    "$ref": "#/definitions/dto.RawResolved"
                },
                "postProcessing": {
                    "$ref": "#/definitions/dto.PrePostProcessing"
                },
                "preProcessing": {
                    "$ref": "#/definitions/dto.PrePostProcessing"
                },
                "priority": {
                    "type": "integer"
                },
                "progress": {
                    "type": "number"
                },
                "remaining": {
                    "type": "number"
                },
                "source": {
                    "$ref": "#/definitions/dto.TaskSource"
                },
                "startedAt": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/dto.TaskStatus"
                },
                "updatedAt": {
                    "type": "integer"
                },
                "uuid": {
                    "type": "string"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NewWebhook"
                    }
                }
            }
        },
        "dto.TaskSource": {
            "type": "string",
            "enum": [
                "api",
                "watchfolder"
            ],
            "x-enum-varnames": [
                "API",
                "WATCHFOLDER"
            ]
        },
        "dto.TaskStatus": {
            "type": "string",
            "enum": [
                "QUEUED",
                "RUNNING",
                "PRE_PROCESSING",
                "POST_PROCESSING",
                "DONE_SUCCESSFUL",
                "DONE_ERROR",
                "DONE_CANCELED"
            ],
            "x-enum-varnames": [
                "QUEUED",
                "RUNNING",
                "PRE_PROCESSING",
                "POST_PROCESSING",
                "DONE_SUCCESSFUL",
                "DONE_ERROR",
                "DONE_CANCELED"
            ]
        },
        "dto.Watchfolder": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "filter": {
                    "$ref": "#/definitions/dto.WatchfolderFilter"
                },
                "growthChecks": {
                    "type": "integer"
                },
                "interval": {
                    "type": "integer"
                },
                "lastCheck": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "preset": {
                    "type": "string"
                },
                "suspended": {
                    "type": "boolean"
                },
                "updatedAt": {
                    "type": "integer"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.WatchfolderFilter": {
            "type": "object",
            "properties": {
                "extensions": {
                    "$ref": "#/definitions/dto.WatchfolderFilterExtensions"
                }
            }
        },
        "dto.WatchfolderFilterExtensions": {
            "type": "object",
            "properties": {
                "exclude": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "include": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.Webhook": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "event": {
                    "$ref": "#/definitions/dto.WebhookEvent"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.WebhookEvent": {
            "type": "string",
            "enum": [
                "batch.created",
                "batch.finished",
                "task.created",
                "task.updated",
                "task.deleted",
                "preset.created",
                "preset.updated",
                "preset.deleted",
                "webhook.created",
                "webhook.updated",
                "webhook.deleted",
                "watchfolder.created",
                "watchfolder.updated",
                "watchfolder.deleted"
            ],
            "x-enum-varnames": [
                "BATCH_CREATED",
                "BATCH_FINISHED",
                "TASK_CREATED",
                "TASK_UPDATED",
                "TASK_DELETED",
                "PRESET_CREATED",
                "PRESET_UPDATED",
                "PRESET_DELETED",
                "WEBHOOK_CREATED",
                "WEBHOOK_UPDATED",
                "WEBHOOK_DELETED",
                "WATCHFOLDER_CREATED",
                "WATCHFOLDER_UPDATED",
                "WATCHFOLDER_DELETED"
            ]
        },
        "dto.WebhookExecution": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "event": {
                    "$ref": "#/definitions/dto.WebhookEvent"
                },
                "request": {
                    "$ref": "#/definitions/dto.WebhookRequest"
                },
                "response": {
                    "$ref": "#/definitions/dto.WebhookResponse"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.WebhookRequest": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "dto.WebhookResponse": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "localhost",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "ffmate API",
	Description:      "A wrapper around ffmpeg",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
