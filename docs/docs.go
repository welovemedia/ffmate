// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "We love media",
            "email": "sev@welovemedia.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://en.wikipedia.org/wiki/MIT_License"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/presets": {
            "get": {
                "description": "List all existing presets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "List all presets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Preset"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new preset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "Add a new preset",
                "parameters": [
                    {
                        "description": "new preset",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewPreset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Preset"
                        }
                    }
                }
            }
        },
        "/presets/{uuid}": {
            "delete": {
                "description": "Delete a preset by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "Delete a preset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the presets uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "description": "List all existing tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "List all tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Task"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new tasks to the queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Add a new task",
                "parameters": [
                    {
                        "description": "new task",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewTask"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Task"
                        }
                    }
                }
            }
        },
        "/tasks/{uuid}": {
            "get": {
                "description": "Get a single task by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get single task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the tasks uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Task"
                        }
                    }
                }
            }
        },
        "/tasks/{uuid}/cancel": {
            "patch": {
                "description": "Cancel a task by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Cancel a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the tasks uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Task"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "Get ffmate version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "version"
                ],
                "summary": "Get ffmate version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Version"
                        }
                    }
                }
            }
        },
        "/webhooks": {
            "get": {
                "description": "List all existing webhooks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "List all webhooks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Webhook"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new webhook for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Add a new webhook",
                "parameters": [
                    {
                        "description": "new webhook",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewWebhook"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Webhook"
                        }
                    }
                }
            }
        },
        "/webhooks/{uuid}": {
            "delete": {
                "description": "Delete a webhook by its uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Delete a webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the webhooks uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.NewPreset": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.NewTask": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "inputFile": {
                    "type": "string"
                },
                "outputFile": {
                    "type": "string"
                },
                "preset": {
                    "type": "string"
                }
            }
        },
        "dto.NewWebhook": {
            "type": "object",
            "properties": {
                "event": {
                    "$ref": "#/definitions/dto.WebhookEvent"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "dto.Preset": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.Task": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "inputFile": {
                    "type": "string"
                },
                "outputFile": {
                    "type": "string"
                },
                "progress": {
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/dto.TaskStatus"
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.TaskStatus": {
            "type": "string",
            "enum": [
                "QUEUED",
                "RUNNING",
                "DONE_SUCCESSFUL",
                "DONE_ERROR",
                "DONE_CANCELED"
            ],
            "x-enum-varnames": [
                "QUEUED",
                "RUNNING",
                "DONE_SUCCESSFUL",
                "DONE_ERROR",
                "DONE_CANCELED"
            ]
        },
        "dto.Version": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.Webhook": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "event": {
                    "$ref": "#/definitions/dto.WebhookEvent"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.WebhookEvent": {
            "type": "string",
            "enum": [
                "task.created",
                "task.status.updated",
                "preset.created",
                "preset.deleted",
                "webhook.created",
                "webhook.deleted"
            ],
            "x-enum-varnames": [
                "TASK_CREATED",
                "TASK_STATUS_UPDATED",
                "PRESET_CREATED",
                "PRESET_DELETE",
                "WEBHOOK_CREATED",
                "WEBHOOK_DELETED"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "{will be injected}",
	Host:             "localhost",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "ffmate API",
	Description:      "A wrapper around ffmpeg",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
